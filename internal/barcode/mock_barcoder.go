// Code generated by MockGen. DO NOT EDIT.
// Source: /home/alp-tahta/projects/warehouse/internal/barcode/barcodeinterface.go

// Package barcode is a generated GoMock package.
package barcode

import (
	reflect "reflect"

	model "github.com/alp-tahta/warehouse/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockBarcoder is a mock of Barcoder interface.
type MockBarcoder struct {
	ctrl     *gomock.Controller
	recorder *MockBarcoderMockRecorder
}

// MockBarcoderMockRecorder is the mock recorder for MockBarcoder.
type MockBarcoderMockRecorder struct {
	mock *MockBarcoder
}

// NewMockBarcoder creates a new mock instance.
func NewMockBarcoder(ctrl *gomock.Controller) *MockBarcoder {
	mock := &MockBarcoder{ctrl: ctrl}
	mock.recorder = &MockBarcoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBarcoder) EXPECT() *MockBarcoderMockRecorder {
	return m.recorder
}

// CreateBarcodeString mocks base method.
func (m *MockBarcoder) CreateBarcodeString(cID, oID string, pID int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBarcodeString", cID, oID, pID)
	ret0, _ := ret[0].(string)
	return ret0
}

// CreateBarcodeString indicates an expected call of CreateBarcodeString.
func (mr *MockBarcoderMockRecorder) CreateBarcodeString(cID, oID, pID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBarcodeString", reflect.TypeOf((*MockBarcoder)(nil).CreateBarcodeString), cID, oID, pID)
}

// ResolveBarcode mocks base method.
func (m *MockBarcoder) ResolveBarcode(barcode string) (model.BarcodeFields, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveBarcode", barcode)
	ret0, _ := ret[0].(model.BarcodeFields)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveBarcode indicates an expected call of ResolveBarcode.
func (mr *MockBarcoderMockRecorder) ResolveBarcode(barcode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveBarcode", reflect.TypeOf((*MockBarcoder)(nil).ResolveBarcode), barcode)
}
