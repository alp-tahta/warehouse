// Code generated by MockGen. DO NOT EDIT.
// Source: /home/alp-tahta/projects/warehouse/internal/repository/repository.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	model "github.com/alp-tahta/warehouse/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryI is a mock of RepositoryI interface.
type MockRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryIMockRecorder
}

// MockRepositoryIMockRecorder is the mock recorder for MockRepositoryI.
type MockRepositoryIMockRecorder struct {
	mock *MockRepositoryI
}

// NewMockRepositoryI creates a new mock instance.
func NewMockRepositoryI(ctrl *gomock.Controller) *MockRepositoryI {
	mock := &MockRepositoryI{ctrl: ctrl}
	mock.recorder = &MockRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryI) EXPECT() *MockRepositoryIMockRecorder {
	return m.recorder
}

// CheckIfBarcodeMarked mocks base method.
func (m *MockRepositoryI) CheckIfBarcodeMarked(id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfBarcodeMarked", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfBarcodeMarked indicates an expected call of CheckIfBarcodeMarked.
func (mr *MockRepositoryIMockRecorder) CheckIfBarcodeMarked(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfBarcodeMarked", reflect.TypeOf((*MockRepositoryI)(nil).CheckIfBarcodeMarked), id)
}

// CreateOrder mocks base method.
func (m *MockRepositoryI) CreateOrder(req model.CreateOrderRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockRepositoryIMockRecorder) CreateOrder(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockRepositoryI)(nil).CreateOrder), req)
}

// GetShelvesDetails mocks base method.
func (m *MockRepositoryI) GetShelvesDetails() ([]model.ShelfInformationWithCustomer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShelvesDetails")
	ret0, _ := ret[0].([]model.ShelfInformationWithCustomer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShelvesDetails indicates an expected call of GetShelvesDetails.
func (mr *MockRepositoryIMockRecorder) GetShelvesDetails() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShelvesDetails", reflect.TypeOf((*MockRepositoryI)(nil).GetShelvesDetails))
}

// IncreaseShelfOccupancy mocks base method.
func (m *MockRepositoryI) IncreaseShelfOccupancy(barcodeFields model.BarcodeFields) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseShelfOccupancy", barcodeFields)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseShelfOccupancy indicates an expected call of IncreaseShelfOccupancy.
func (mr *MockRepositoryIMockRecorder) IncreaseShelfOccupancy(barcodeFields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseShelfOccupancy", reflect.TypeOf((*MockRepositoryI)(nil).IncreaseShelfOccupancy), barcodeFields)
}

// MarkBarcode mocks base method.
func (m *MockRepositoryI) MarkBarcode(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkBarcode", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkBarcode indicates an expected call of MarkBarcode.
func (mr *MockRepositoryIMockRecorder) MarkBarcode(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkBarcode", reflect.TypeOf((*MockRepositoryI)(nil).MarkBarcode), id)
}
