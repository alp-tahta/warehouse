// Code generated by MockGen. DO NOT EDIT.
// Source: /home/alp-tahta/projects/warehouse/internal/service/service.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"
	template "text/template"

	model "github.com/alp-tahta/warehouse/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockServiceI is a mock of ServiceI interface.
type MockServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockServiceIMockRecorder
}

// MockServiceIMockRecorder is the mock recorder for MockServiceI.
type MockServiceIMockRecorder struct {
	mock *MockServiceI
}

// NewMockServiceI creates a new mock instance.
func NewMockServiceI(ctrl *gomock.Controller) *MockServiceI {
	mock := &MockServiceI{ctrl: ctrl}
	mock.recorder = &MockServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceI) EXPECT() *MockServiceIMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockServiceI) CreateOrder(req model.CreateOrderRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockServiceIMockRecorder) CreateOrder(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockServiceI)(nil).CreateOrder), req)
}

// GetShelvesDetails mocks base method.
func (m *MockServiceI) GetShelvesDetails() ([]model.ShelfInformationWithCustomer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShelvesDetails")
	ret0, _ := ret[0].([]model.ShelfInformationWithCustomer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShelvesDetails indicates an expected call of GetShelvesDetails.
func (mr *MockServiceIMockRecorder) GetShelvesDetails() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShelvesDetails", reflect.TypeOf((*MockServiceI)(nil).GetShelvesDetails))
}

// Index mocks base method.
func (m *MockServiceI) Index() (*template.Template, []model.ShelfInformationWithCustomer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index")
	ret0, _ := ret[0].(*template.Template)
	ret1, _ := ret[1].([]model.ShelfInformationWithCustomer)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Index indicates an expected call of Index.
func (mr *MockServiceIMockRecorder) Index() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockServiceI)(nil).Index))
}

// UpdateBarcodeStatus mocks base method.
func (m *MockServiceI) UpdateBarcodeStatus(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBarcodeStatus", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBarcodeStatus indicates an expected call of UpdateBarcodeStatus.
func (mr *MockServiceIMockRecorder) UpdateBarcodeStatus(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBarcodeStatus", reflect.TypeOf((*MockServiceI)(nil).UpdateBarcodeStatus), id)
}
